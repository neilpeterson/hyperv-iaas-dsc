{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.613.9944",
      "templateHash": "775490285450134932"
    }
  },
  "parameters": {
    "adminUserName": {
      "type": "string"
    },
    "adminPassword": {
      "type": "secureString"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v3"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[uniqueString(subscription().subscriptionId, resourceGroup().id)]"
    },
    "automationAccountName": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id)]"
    },
    "sharedManagedDisk": {
      "type": "string",
      "defaultValue": "/subscriptions/3762d87c-ddb8-425f-b2fc-29e5e859edaf/resourceGroups/AUTOMATION-CENTRAL-001/providers/Microsoft.Compute/disks/vhd-dsc-bootstrap"
    },
    "hubNetwork": {
      "type": "object",
      "defaultValue": {
        "name": "vnet-hub",
        "addressPrefix": "10.0.0.0/20"
      }
    },
    "resourceSubnet": {
      "type": "object",
      "defaultValue": {
        "subnetName": "ResourceSubnet",
        "nsgName": "nsg-hub-resources",
        "subnetPrefix": "10.0.2.0/24"
      }
    },
    "bastionHost": {
      "type": "object",
      "defaultValue": {
        "name": "AzureBastionHost",
        "publicIPAddressName": "pip-bastion",
        "subnetName": "AzureBastionSubnet",
        "nsgName": "nsg-hub-bastion",
        "subnetPrefix": "10.0.1.0/29"
      }
    },
    "hypervConfiguration": {
      "type": "object",
      "defaultValue": {
        "name": "hyperv",
        "description": "A configuration for installing Hyper-V.",
        "script": "https://raw.githubusercontent.com/neilpeterson/hyperv-iaas-dsc/master/config/hyperv.ps1"
      }
    },
    "addcConfiguration": {
      "type": "object",
      "defaultValue": {
        "name": "addc",
        "description": "A configuration for installing AADC.",
        "script": "https://raw.githubusercontent.com/neilpeterson/hyperv-iaas-dsc/master/config/addc.ps1"
      }
    },
    "iisConfiguration": {
      "type": "object",
      "defaultValue": {
        "name": "iis",
        "description": "A configuration for installing IIS.",
        "script": "https://raw.githubusercontent.com/neilpeterson/hyperv-iaas-dsc/master/config/iis.ps1"
      }
    },
    "rodcConfiguration": {
      "type": "object",
      "defaultValue": {
        "name": "rodc",
        "description": "A configuration for installing a read only domain controller.",
        "script": "https://raw.githubusercontent.com/neilpeterson/hyperv-iaas-dsc/master/config/rodc.ps1"
      }
    },
    "memberConfiguration": {
      "type": "object",
      "defaultValue": {
        "name": "member",
        "description": "A configuration for installing a member server.",
        "script": "https://raw.githubusercontent.com/neilpeterson/hyperv-iaas-dsc/master/config/member.ps1"
      }
    },
    "addcVirtualMachine": {
      "type": "object",
      "defaultValue": {
        "name": "vm-addc",
        "nicName": "nic-addc",
        "windowsOSVersion": "2022-datacenter",
        "diskName": "data"
      }
    },
    "hypervVirtualMachine": {
      "type": "object",
      "defaultValue": {
        "name": "vm-hyperv",
        "nicName": "nic-hyperv",
        "windowsOSVersion": "2022-datacenter",
        "diskName": "addc-data"
      }
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "Free"
        }
      }
    },
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2020-01-13-preview",
      "name": "[parameters('automationAccountName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "Basic"
        }
      }
    },
    {
      "type": "Microsoft.Automation/automationAccounts/credentials",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Admincreds')]",
      "properties": {
        "description": "Admin credentials.",
        "password": "[parameters('adminPassword')]",
        "userName": "[parameters('adminUserName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'StorageDsc')]",
      "location": "[parameters('location')]",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/StorageDsc/5.0.1",
          "version": "5.0.1"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'ActiveDirectoryDsc')]",
      "location": "eastus",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/ActiveDirectoryDsc/6.0.1",
          "version": "6.0.1"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'xActiveDirectory')]",
      "location": "[parameters('location')]",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/xActiveDirectory/3.0.0.0",
          "version": "3.0.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'xNetworking')]",
      "location": "[parameters('location')]",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/xNetworking/5.7.0.0",
          "version": "5.7.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'xPendingReboot')]",
      "location": "[parameters('location')]",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/xPendingReboot/0.4.0.0",
          "version": "0.4.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'xHyper-V')]",
      "location": "[parameters('location')]",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/xHyper-V/3.17.0.0",
          "version": "3.17.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/modules",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'xComputerManagement')]",
      "location": "[parameters('location')]",
      "properties": {
        "contentLink": {
          "uri": "https://www.powershellgallery.com/api/v2/package/xComputerManagement/4.1.0",
          "version": "3.0.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/configurations",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('addcConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "logVerbose": false,
        "description": "[parameters('addcConfiguration').description]",
        "source": {
          "type": "uri",
          "value": "[parameters('addcConfiguration').script]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'StorageDsc')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xActiveDirectory')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xNetworking')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xPendingReboot')]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/compilationjobs",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('addcConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "configuration": {
          "name": "[parameters('addcConfiguration').name]"
        },
        "parameters": {
          "ConfigurationData": "{\"AllNodes\":[{\"NodeName\":\"localhost\",\"PSDSCAllowPlainTextPassword\":true}]}",
          "DomainName": "contoso.com"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/credentials', parameters('automationAccountName'), 'Admincreds')]",
        "[resourceId('Microsoft.Automation/automationAccounts/configurations', parameters('automationAccountName'), parameters('addcConfiguration').name)]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/configurations",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('rodcConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "logVerbose": false,
        "description": "[parameters('rodcConfiguration').description]",
        "source": {
          "type": "uri",
          "value": "[parameters('rodcConfiguration').script]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'ActiveDirectoryDsc')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'StorageDsc')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xNetworking')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xPendingReboot')]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/compilationjobs",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('rodcConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "configuration": {
          "name": "[parameters('rodcConfiguration').name]"
        },
        "parameters": {
          "ConfigurationData": "{\"AllNodes\":[{\"NodeName\":\"localhost\",\"PSDSCAllowPlainTextPassword\":true}]}",
          "DomainName": "contoso.com",
          "DNSAddress": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)).ipConfigurations[0].properties.privateIPAddress]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/credentials', parameters('automationAccountName'), 'Admincreds')]",
        "[resourceId('Microsoft.Automation/automationAccounts/configurations', parameters('automationAccountName'), parameters('rodcConfiguration').name)]",
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/configurations",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('hypervConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "logVerbose": false,
        "description": "[parameters('hypervConfiguration').description]",
        "source": {
          "type": "uri",
          "value": "[parameters('hypervConfiguration').script]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xActiveDirectory')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xComputerManagement')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xHyper-V')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xPendingReboot')]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/compilationjobs",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('hypervConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "incrementNodeConfigurationBuild": false,
        "configuration": {
          "name": "[parameters('hypervConfiguration').name]"
        },
        "parameters": {
          "ConfigurationData": "{\"AllNodes\":[{\"NodeName\":\"localhost\",\"PSDSCAllowPlainTextPassword\":true}]}",
          "DomainName": "contoso.com",
          "DNSAddress": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)).ipConfigurations[0].properties.privateIPAddress]",
          "ComputerName": "[parameters('hypervVirtualMachine').name]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/credentials', parameters('automationAccountName'), 'Admincreds')]",
        "[resourceId('Microsoft.Automation/automationAccounts/configurations', parameters('automationAccountName'), parameters('hypervConfiguration').name)]",
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/configurations",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('iisConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "logVerbose": false,
        "description": "[parameters('iisConfiguration').description]",
        "source": {
          "type": "uri",
          "value": "[parameters('iisConfiguration').script]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/compilationjobs",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('iisConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "incrementNodeConfigurationBuild": false,
        "configuration": {
          "name": "[parameters('iisConfiguration').name]"
        },
        "parameters": {
          "ConfigurationData": "{\"AllNodes\":[{\"NodeName\":\"localhost\",\"PSDSCAllowPlainTextPassword\":true}]}",
          "DomainName": "contoso.com",
          "DNSAddress": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)).ipConfigurations[0].properties.privateIPAddress]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/configurations', parameters('automationAccountName'), parameters('iisConfiguration').name)]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xActiveDirectory')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xComputerManagement')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xNetworking')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xPendingReboot')]",
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/configurations",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('memberConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "logVerbose": false,
        "description": "[parameters('memberConfiguration').description]",
        "source": {
          "type": "uri",
          "value": "[parameters('memberConfiguration').script]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/compilationjobs",
      "apiVersion": "2020-01-13-preview",
      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('memberConfiguration').name)]",
      "location": "[parameters('location')]",
      "properties": {
        "incrementNodeConfigurationBuild": false,
        "configuration": {
          "name": "[parameters('memberConfiguration').name]"
        },
        "parameters": {
          "ConfigurationData": "{\"AllNodes\":[{\"NodeName\":\"localhost\",\"PSDSCAllowPlainTextPassword\":true}]}",
          "DomainName": "contoso.com",
          "DNSAddress": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)).ipConfigurations[0].properties.privateIPAddress]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/configurations', parameters('automationAccountName'), parameters('memberConfiguration').name)]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xActiveDirectory')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xComputerManagement')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xNetworking')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xPendingReboot')]",
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[parameters('hubNetwork').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('hubNetwork').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('bastionHost').subnetName]",
            "properties": {
              "addressPrefix": "[parameters('bastionHost').subnetPrefix]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsgbastion')]"
              }
            }
          },
          {
            "name": "[parameters('resourceSubnet').subnetName]",
            "properties": {
              "addressPrefix": "[parameters('resourceSubnet').subnetPrefix]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsgVirtualMachines')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsgbastion')]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsgVirtualMachines')]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('hubNetwork').name)]",
      "name": "diahVnetHub",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-06-01",
      "name": "bastionpip",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-06-01",
      "name": "nsgbastion",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "bastion-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "Internet",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-control-in-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "GatewayManager",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-in-host",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "bastion-vnet-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRanges": [
                "22",
                "3389"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-azure-out-allow",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "AzureCloud",
              "access": "Allow",
              "priority": 120,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-out-host",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "8080",
                "5701"
              ],
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 130,
              "direction": "Outbound"
            }
          },
          {
            "name": "bastion-out-deny",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 1000,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2020-06-01",
      "name": "bastionhost",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconf",
            "properties": {
              "subnet": {
                "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name), parameters('bastionHost').subnetName)]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'bastionpip')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'bastionpip')]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-08-01",
      "name": "nsgVirtualMachines",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "bastion-in-vnet",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "[parameters('bastionHost').subnetPrefix]",
              "destinationPortRanges": [
                "22",
                "3389"
              ],
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationPortRange": "443",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 1000,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[parameters('addcVirtualMachine').nicName]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name), parameters('resourceSubnet').subnetName)]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2020-09-30",
      "name": "[parameters('addcVirtualMachine').diskName]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Premium_LRS"
      },
      "properties": {
        "creationData": {
          "createOption": "Empty"
        },
        "diskSizeGB": 256,
        "diskIOPSReadWrite": 7500,
        "diskMBpsReadWrite": 250
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "name": "[parameters('addcVirtualMachine').name]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('addcVirtualMachine').name]",
          "adminUsername": "[parameters('adminUserName')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('addcVirtualMachine').windowsOSVersion]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "createOption": "Attach",
              "lun": 1,
              "managedDisk": {
                "id": "[resourceId('Microsoft.Compute/disks', parameters('addcVirtualMachine').diskName)]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/disks', parameters('addcVirtualMachine').diskName)]",
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('addcVirtualMachine').nicName)]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', parameters('addcVirtualMachine').name, 'Microsoft.Powershell.DSC')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.76",
        "protectedSettings": {
          "Items": {
            "registrationKeyPrivate": "[listKeys(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2019-06-01').Keys[0].value]"
          }
        },
        "settings": {
          "Properties": [
            {
              "Name": "RegistrationKey",
              "Value": {
                "UserName": "PLACEHOLDER_DONOTUSE",
                "Password": "PrivateSettingsRef:registrationKeyPrivate"
              },
              "TypeName": "System.Management.Automation.PSCredential"
            },
            {
              "Name": "RegistrationUrl",
              "Value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))).registrationUrl]",
              "TypeName": "System.String"
            },
            {
              "Name": "NodeConfigurationName",
              "Value": "[format('{0}.localhost', parameters('addcConfiguration').name)]",
              "TypeName": "System.String"
            },
            {
              "Name": "ConfigurationMode",
              "Value": "ApplyAndAutoCorrect",
              "TypeName": "System.String"
            },
            {
              "Name": "ConfigurationModeFrequencyMins",
              "Value": 15,
              "TypeName": "System.Int32"
            },
            {
              "Name": "RefreshFrequencyMins",
              "Value": 30,
              "TypeName": "System.Int32"
            },
            {
              "Name": "RebootNodeIfNeeded",
              "Value": true,
              "TypeName": "System.Boolean"
            },
            {
              "Name": "ActionAfterReboot",
              "Value": "ContinueConfiguration",
              "TypeName": "System.String"
            },
            {
              "Name": "AllowModuleOverwrite",
              "Value": false,
              "TypeName": "System.Boolean"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/compilationjobs', parameters('automationAccountName'), parameters('addcConfiguration').name)]",
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('addcVirtualMachine').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[parameters('hypervVirtualMachine').nicName]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name), parameters('resourceSubnet').subnetName)]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2020-09-30",
      "name": "[parameters('hypervVirtualMachine').diskName]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Premium_LRS"
      },
      "properties": {
        "creationData": {
          "createOption": "Empty"
        },
        "diskSizeGB": 256,
        "diskIOPSReadWrite": 7500,
        "diskMBpsReadWrite": 250
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "name": "[parameters('hypervVirtualMachine').name]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('hypervVirtualMachine').name]",
          "adminUsername": "[parameters('adminUserName')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('hypervVirtualMachine').windowsOSVersion]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "createOption": "Attach",
              "lun": 1,
              "managedDisk": {
                "id": "[resourceId('Microsoft.Compute/disks', parameters('hypervVirtualMachine').diskName)]"
              }
            },
            {
              "createOption": "Attach",
              "lun": 2,
              "managedDisk": {
                "id": "[parameters('sharedManagedDisk')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('hypervVirtualMachine').nicName)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/disks', parameters('hypervVirtualMachine').diskName)]",
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('hypervVirtualMachine').nicName)]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "name": "[format('{0}/{1}', parameters('hypervVirtualMachine').name, 'Microsoft.Powershell.DSC')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.76",
        "protectedSettings": {
          "Items": {
            "registrationKeyPrivate": "[listKeys(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2019-06-01').Keys[0].value]"
          }
        },
        "settings": {
          "Properties": [
            {
              "Name": "RegistrationKey",
              "Value": {
                "UserName": "PLACEHOLDER_DONOTUSE",
                "Password": "PrivateSettingsRef:registrationKeyPrivate"
              },
              "TypeName": "System.Management.Automation.PSCredential"
            },
            {
              "Name": "RegistrationUrl",
              "Value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))).registrationUrl]",
              "TypeName": "System.String"
            },
            {
              "Name": "NodeConfigurationName",
              "Value": "[format('{0}.localhost', parameters('hypervConfiguration').name)]",
              "TypeName": "System.String"
            },
            {
              "Name": "ConfigurationMode",
              "Value": "ApplyAndAutoCorrect",
              "TypeName": "System.String"
            },
            {
              "Name": "ConfigurationModeFrequencyMins",
              "Value": 15,
              "TypeName": "System.Int32"
            },
            {
              "Name": "RefreshFrequencyMins",
              "Value": 30,
              "TypeName": "System.Int32"
            },
            {
              "Name": "RebootNodeIfNeeded",
              "Value": true,
              "TypeName": "System.Boolean"
            },
            {
              "Name": "ActionAfterReboot",
              "Value": "ContinueConfiguration",
              "TypeName": "System.String"
            },
            {
              "Name": "AllowModuleOverwrite",
              "Value": false,
              "TypeName": "System.Boolean"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('addcVirtualMachine').name, 'Microsoft.Powershell.DSC')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xActiveDirectory')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xHyper-V')]",
        "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), 'xPendingReboot')]",
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('hypervVirtualMachine').name)]"
      ]
    }
  ]
}