variables:
- name: resource-group
  value: kv-001
- name: automation-account
  value: phsovkb7zgqho
- name: location
  value: eastus
- name: config-name
  value: iis
- name: config-location
  value: config/iis.ps1
- group: signing-certificates

trigger:
  branches:
    include:
    - main
  paths:
    include:
      - config/*
      - azure-pipelines.yml

stages:

# - stage: test
#   dependsOn: []
  
#   jobs:
#   - job: tests
#     pool:
#       vmImage: windows-2019
#     continueOnError: false
#     timeoutInMinutes: 20

#     steps:

#     - task: PowerShell@2
#       displayName: Install Pester
#       inputs:
#         targetType: 'inline'
#         script: |
#           Find-Module pester | Install-Module -Force

- stage: build
  # dependsOn: test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - job: build
    pool: 
      vmImage: windows-2019
    continueOnError: false
    timeoutInMinutes: 20
    
    steps:

    - task: PowerShell@2
      displayName: "Import code signing cert to agent"
      inputs:
        targetType: 'inline'
        script: |
          $secretBytes = [System.Convert]::FromBase64String("$(code-sign-windows)")
          # Build pfx
          $pfxcert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
          $keyStoreFlags = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable `
              -bxor [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::MachineKeySet `
              -bxor [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet
          $pfxcert.Import($secretBytes, $null, $keyStoreFlags)
          # import to personal store
          $store = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Store -ArgumentList @("My", "CurrentUser")
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
          $store.Add($pfxcert)
          $store.Close()

    - task: PowerShell@2
      displayName: "Sign PowerShell scripts"
      inputs:
        targetType: 'inline'
        script: |
          $encoding = "UTF8"
          $scriptFolder = "./config/"
          $scripts = Get-ChildItem -Path $scriptFolder -Filter "*.ps1" -Recurse -ErrorAction Stop
          foreach ($script in $scripts) {
              try {
                  $codeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
                  Write-Output "Signing script `"$($script.Name)`" with certificate `"$($codeSigningCert.Thumbprint)`""
                  $null = Set-AuthenticodeSignature -Certificate $codeSigningCert -FilePath $script.FullName -TimestampServer "http://timestamp.comodoca.com/rfc3161"
                  $null = Copy-Item -Path $script.FullName -Destination $env:Build_ArtifactStagingDirectory
              } catch {
                  Write-Error $_
              }
          }

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'SignedScripts'
        publishLocation: 'Container'

- stage: deployStage
  dependsOn: build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - job: build
    pool: 
      vmImage: windows-2019
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem $(System.ArtifactsDirectory)/SignedScripts/'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Find-Module ActiveDirectoryDsc | Install-Module -Force
          Find-Module xComputerManagement | Install-Module -Force
          Find-Module xNetworking | Install-Module -Force
          Find-Module xPendingReboot | Install-Module -Force

    - task: AzurePowerShell@5
      inputs:
        azureSubscription: 'ca-nepeters-demo-test(3762d87c-ddb8-425f-b2fc-29e5e859edaf)'
        ScriptType: 'InlineScript'
        Inline: |
          . $(System.ArtifactsDirectory)/SignedScripts/iis.ps1
          iis
          Import-AzAutomationDscNodeConfiguration -AutomationAccountName $(automation-account) -ResourceGroupName $(resource-group) -ConfigurationName "iis" -Path ./localhost.mof -IncrementNodeConfigurationBuild

    # - task: AzurePowerShell@5
    #   inputs:
    #     azureSubscription: 'ca-nepeters-demo-test(3762d87c-ddb8-425f-b2fc-29e5e859edaf)'
    #     ScriptType: 'InlineScript'
    #     Inline: 'Import-AzAutomationDscConfiguration -AutomationAccountName $(automation-account) -ResourceGroupName $(resource-group) -SourcePath $(System.ArtifactsDirectory)/SignedScripts/iis.ps1 -Force -Published'
    #     azurePowerShellVersion: 'LatestVersion'
    #   displayName: Import Configuration

    # Signed configurations not supported, convert to MOF and manually import
    # - task: AzurePowerShell@5
    #   inputs:
    #     azureSubscription: 'ca-nepeters-demo-test(3762d87c-ddb8-425f-b2fc-29e5e859edaf)'
    #     ScriptType: 'InlineScript'
    #     azurePowerShellVersion: 'LatestVersion'
    #     Inline: |
    #       # $Params = @{"DomainName"="contoso.com";"DNSAddress"="10.0.2.4"}
    #       Start-AzAutomationDscCompilationJob -ConfigurationName $(config-name) -AutomationAccountName $(automation-account) -ResourceGroupName $(resource-group)
    #   displayName: Compile Configuration
    